
%% 2D Darcy flow around circular preform particles
% Domain: 10 mm × 4 mm rectangle  
% Particles: 6 circles of radius 0.5 mm
% Inlet (left): P = Pin; Outlet (right): P = 0; No‐flow on top/bottom and particle walls.

close all; clear;

Pin   = 1e5;      % inlet pressure [Pa]
K     = 1e-12;    % permeability [m^2]
mu    = 0.1;      % viscosity [Pa·s]

%% 1) Create PDE model
model = createpde(1);    % scalar PDE (Darcy potential P)
%% 2) Construct geometry: rectangle minus uniformly spaced circles
W = 10e-3;   H = 4e-3;   % domain [m]
R1 = [3;4; 0;W;W;0; 0;0;H;H];

gd = R1;
ns = 'R1';
sf = 'R1';
nCirc = 6;          % total number of circles
r     = 0.5e-3;     % circle radius

% specify grid dimensions: 2 rows × 3 cols = 6 circles
nRows = 2;
nCols = 3;

% preallocate
centers = zeros(nCirc,2);

count = 0;
for i = 1:nRows
    for j = 1:nCols
        count = count + 1;
        % evenly spaced in x: avoid edges by offsetting half‐cell
        x0 = (j/(nCols+1)) * W;
        % evenly spaced in y: two rows at H/3 and 2H/3
        y0 = (i/(nRows+1)) * H;
        centers(count,:) = [x0, y0];

        % build the circle description Ci = [1; x0; y0; r; zeros(6,1)];
        Ci = [1; x0; y0; r; zeros(6,1)];
        gd = [gd, Ci];

        % append name and set‐formula
        ns = char(ns, sprintf('C%d',count));      
        sf = [sf, sprintf('-C%d',count)];       
    end
end

% turn ns into char array, decompose and apply
ns = ns';
[g, bt] = decsg(gd, sf, ns);
geometryFromEdges(model, g);

%% 3) Mesh once to classify edges
mesh = generateMesh(model,'Hmax',0.05e-3);

numE = model.Geometry.NumEdges;
edgesLeft  = [];
edgesRight = [];
for eid = 1:numE
    nodeIDs = findNodes(mesh,'region','Edge',eid);
    pts     = mesh.Nodes(:,nodeIDs);
    xmean   = mean(pts(1,:));
    if abs(xmean) < 1e-6
        edgesLeft(end+1) = eid;
    elseif abs(xmean - W) < 1e-6
        edgesRight(end+1) = eid;
    end
end
edgesAll       = 1:numE;
edgesTopBottom = setdiff(edgesAll, [edgesLeft, edgesRight]);

% Plot the mesh
figure;
pdemesh(model);
title('Finite Element Mesh');
axis equal;

%% 4) Boundary conditions
applyBoundaryCondition(model,'dirichlet','Edge',edgesLeft,  'u',Pin);
applyBoundaryCondition(model,'dirichlet','Edge',edgesRight, 'u',0);
applyBoundaryCondition(model,'neumann',  'Edge',edgesTopBottom,'g',0,'q',0);

%% 5) PDE coefficients
specifyCoefficients(model,'m',0,'d',0,'c',K,'a',0,'f',0);

%% 6) Solve
R = solvepde(model);
P = R.NodalSolution;

%% 7) Darcy velocity
[gradPx,gradPy] = evaluateGradient(R);
vx = -K/mu * gradPx;
vy = -K/mu * gradPy;

%% 8) Prepare interpolation grid
ngrid = 50; mgrid = 20;
[xg,yg] = meshgrid(linspace(0,W,ngrid), linspace(0,H,mgrid));
Pg  = griddata(R.Mesh.Nodes(1,:),R.Mesh.Nodes(2,:),P,   xg,yg);
vgx = griddata(R.Mesh.Nodes(1,:),R.Mesh.Nodes(2,:),vx', xg,yg);
vgy = griddata(R.Mesh.Nodes(1,:),R.Mesh.Nodes(2,:),vy', xg,yg);


%% 9) 1×2 Subplots
%% --- 1×2 Subplots: Pressure & Streamlines (no background contour on the right) ---

figure('Color','w','Position',[200 200 900 350])

% Left: pressure field + circles
subplot(1,2,1)
contourf(xg,yg,Pg,20,'LineColor','none')
colormap(jet), colorbar
title('Pressure (Pa)')
xlabel('x (m)'), ylabel('y (m)')
axis equal tight, hold on
for k = 1:nCirc
    viscircles(centers(k,:),r,'EdgeColor','k','LineWidth',1);
end
hold off

% Right: streamlines + circles only
subplot(1,2,2)
hold on
% --- after you have xg, yg, vgx, vgy, centers, r, nCirc ---

% 1) compute speed and interpolate
speed = sqrt(vx.^2 + vy.^2);    % nodal speeds on the PDE mesh
vg  = griddata(R.Mesh.Nodes(1,:), R.Mesh.Nodes(2,:), speed, xg, yg);

% 2) mask out the circle interiors so no “ghost” data inside holes
mask = false(size(xg));
for k = 1:nCirc
    mask = mask | ((xg - centers(k,1)).^2 + (yg - centers(k,2)).^2 < r^2);
end
vg(mask) = NaN;


% 
% % draw streamlines
% starty = linspace(0.1*H,0.9*H,12);
% startx = zeros(size(starty));
% hsl = streamline(xg,yg,vgx,vgy,startx,starty);
% set(hsl,'Color','k','LineWidth',1.2)
% % overlay preform circles
% for k = 1:nCirc
%     viscircles(centers(k,:),r,'EdgeColor','k','LineWidth',1);
% end
% title('Streamlines & Preform')
% xlabel('x (m)'), ylabel('y (m)')
% axis equal tight
% hold off
nodes    = mesh.Nodes';     % N×2 array of (x,y)
elements = mesh.Elements';  % M×3 array of node indices

speed = sqrt( vx.^2 + vy.^2 );  % still one value per node

figure('Color','w','Position',[200 200 600 400])
h = trisurf(...
    elements, ...
    nodes(:,1), nodes(:,2), ...  % XY coordinates
    speed, ...                    % color = speed
    'EdgeColor','none' );           % no mesh line);
view(2)       % look straight down on the XY‐plane
axis tight equal
colormap(jet), colorbar
title('Darcy Velocity Magnitude (m/s)')
xlabel('x (m)'), ylabel('y (m)')
hold on
for k = 1:nCirc
    viscircles( centers(k,:), r, 'EdgeColor','k','LineWidth',1 );
end
hold off

%% 10) Flow Front Tracing Animation
disp('Tracing flow front...');

% build a velocity‐interp on the meshgrid
%   xg,yg are your grid points (ngrid×mgrid), 
%   vgx,vgy are the x‐ and y‐components there.
Ux_grid = vgx;  
Uy_grid = vgy;

figure('Color','w');
hold on;
title('Flow Front Animation');
xlabel('x (m)');  ylabel('y (m)');
axis equal tight;
axis([0 W 0 H]);

% draw your circles as obstacles
for k = 1:nCirc
    viscircles(centers(k,:), r, 'EdgeColor','k','LineWidth',1);
end

% Time integration parameters
dt       = 0.1;      % same as before
max_time =  250;  % or whatever you like

% initial front markers
Npt       = 150;                   % you can pick 120 or 200
initialX  = zeros(1, Npt);
initialY  = linspace(0, H, Npt);
points    = [initialX; initialY];  % 2×Npt

% distance‐break threshold
initial_spacing = H/(Npt-1);
max_line_distance = 2.5 * initial_spacing;

% plot initial front (with NaNs none yet)
h_front = plot(points(1,:), points(2,:), 'b.-', 'MarkerSize',8);

t = 0;
maxX = max(points(1,:));
while maxX < W && t < max_time
    %--- 1) interpolate velocity at each marker
    vx = interp2( xg, yg, Ux_grid, points(1,:), points(2,:), 'linear', 0 );
    vy = interp2( xg, yg, Uy_grid, points(1,:), points(2,:), 'linear', 0 );

    %--- 2) Euler step
    points = points + [vx; vy]*dt;

    %--- 3) enforce bounds 0≤x≤W, 0≤y≤H
    points(1,:) = min(max(points(1,:),0), W);
    points(2,:) = min(max(points(2,:),0), H);
    
     %--- 3.5) keep markers outside any circle
       for k = 1:nCirc
    +     dx = points(1,:) - centers(k,1);
    +     dy = points(2,:) - centers(k,2);
    +     d  = sqrt(dx.^2 + dy.^2);
    +     inside = d < r;            % logical mask of penetrations
    +       if any(inside)
    +       % normalize and project back to the circle perimeter
    +       dxn = dx(inside)./d(inside);
    +       dyn = dy(inside)./d(inside);
    +       points(1,inside) = centers(k,1) + dxn * r;
    +       points(2,inside) = centers(k,2) + dyn * r;
    +       end
       end


    %--- 4) break long segments with NaNs
    diffs    = diff(points,1,2);                % 2×(Npt-1)
    dists    = hypot(diffs(1,:), diffs(2,:));   % 1×(Npt-1)
    breaks   = find(dists > max_line_distance);
    plotX    = points(1,:);
    plotY    = points(2,:);
    for bi = fliplr(breaks)
      plotX = [plotX(1:bi), NaN, plotX(bi+1:end)];
      plotY = [plotY(1:bi), NaN, plotY(bi+1:end)];
    end

    %--- 5) update the plot
    set(h_front,'XData',plotX,'YData',plotY);
    drawnow;

    %--- 6) advance time
    t    = t + dt;
    maxX = max(points(1,:));
end

hold off;
disp('Flow front tracing complete.');
